{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { useFocusEffect, useTheme } from '@react-navigation/native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { HighlightCard } from \"../../components/HighlightCard\";\nimport { TransactionCard } from \"../../components/TransactionCard\";\nimport { Container, Header, UserWrapper, UserInfo, Photo, User, UserGreeting, UserName, Icon, HighlightCards, Transactions, Title, TransactionList, LoadContainer } from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport function Dashboard() {\n  var _higtLightData$entrie, _higtLightData$entrie2, _higtLightData$expens, _higtLightData$expens2, _higtLightData$total, _higtLightData$total2;\n\n  var dataKey = '@gofinance:transactions';\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      transactions = _useState4[0],\n      setTransactions = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      higtLightData = _useState6[0],\n      setHigtLightData = _useState6[1];\n\n  var theme = useTheme();\n\n  function removeAll() {\n    return _removeAll.apply(this, arguments);\n  }\n\n  function _removeAll() {\n    _removeAll = _asyncToGenerator(function* () {\n      yield AsyncStorage.removeItem(dataKey);\n    });\n    return _removeAll.apply(this, arguments);\n  }\n\n  function getLastTransactionDate(collection, type) {\n    var lastTransation = new Date(Math.max.apply(Math, collection.filter(function (transaction) {\n      return transaction.type === type;\n    }).map(function (transaction) {\n      return new Date(transaction.date).getTime();\n    })));\n    return lastTransation.getDate() + \" de \" + lastTransation.toLocaleString('pt-BR', {\n      month: 'long'\n    });\n  }\n\n  function loadTransactions() {\n    return _loadTransactions.apply(this, arguments);\n  }\n\n  function _loadTransactions() {\n    _loadTransactions = _asyncToGenerator(function* () {\n      var dataKey = '@gofinance:transactions';\n      var entriesTotal = 0;\n      var expensiveTotal = 0;\n      var response = yield AsyncStorage.getItem(dataKey);\n      var transactions = response ? JSON.parse(response) : [];\n      var transactionsFormatted = transactions.map(function (item) {\n        if (item.type === 'positive') {\n          entriesTotal += Number(item.amount);\n        } else if (item.type === 'negative') {\n          expensiveTotal += Number(item.amount);\n        }\n\n        var amount = Number(item.amount).toLocaleString('pt-BR', {\n          style: 'currency',\n          currency: 'BRL'\n        });\n        var date = Intl.DateTimeFormat('pt-BR', {\n          day: '2-digit',\n          month: '2-digit',\n          year: '2-digit'\n        }).format(new Date(item.date));\n        return {\n          id: item.id,\n          name: item.name,\n          amount: amount,\n          type: item.type,\n          category: item.category,\n          date: date\n        };\n      });\n      setTransactions(transactionsFormatted);\n      var lastTransactionEntries = getLastTransactionDate(transactions, 'positive');\n      var lastTransactionExpensives = getLastTransactionDate(transactions, 'negative');\n      var totalInterval = \"01 a \" + lastTransactionExpensives;\n      var total = entriesTotal - expensiveTotal;\n      setHigtLightData({\n        entries: {\n          amount: entriesTotal.toLocaleString('pt-BR', {\n            style: 'currency',\n            currency: 'BRL'\n          }),\n          lastTransaction: \"\\xDAltima entrada dia \" + lastTransactionEntries\n        },\n        expensives: {\n          amount: expensiveTotal.toLocaleString('pt-BR', {\n            style: 'currency',\n            currency: 'BRL'\n          }),\n          lastTransaction: \"\\xDAltima sa\\xEDda dia \" + lastTransactionExpensives\n        },\n        total: {\n          amount: total.toLocaleString('pt-BR', {\n            style: 'currency',\n            currency: 'BRL'\n          }),\n          lastTransaction: totalInterval\n        }\n      });\n    });\n    return _loadTransactions.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    loadTransactions();\n    setIsLoading(false);\n  }, []);\n  useFocusEffect(useCallback(function () {\n    loadTransactions();\n  }, []));\n  return _jsx(Container, {\n    children: isLoading ? _jsx(LoadContainer, {\n      children: _jsx(ActivityIndicator, {\n        color: theme.colors.primary,\n        size: \"large\"\n      })\n    }) : _jsxs(_Fragment, {\n      children: [_jsx(Header, {\n        children: _jsxs(UserWrapper, {\n          children: [_jsxs(UserInfo, {\n            children: [_jsx(Photo, {\n              source: {\n                uri: 'https://avatars.githubusercontent.com/u/13911181?v=4'\n              }\n            }), _jsxs(User, {\n              children: [_jsx(UserGreeting, {\n                children: \"Ol\\xE1\"\n              }), _jsx(UserName, {\n                children: \"Bruno\"\n              })]\n            })]\n          }), _jsx(Icon, {\n            name: \"power\"\n          })]\n        })\n      }), _jsxs(HighlightCards, {\n        children: [_jsx(HighlightCard, {\n          type: \"up\",\n          title: \"Entradas\",\n          amount: higtLightData == null ? void 0 : (_higtLightData$entrie = higtLightData.entries) == null ? void 0 : _higtLightData$entrie.amount,\n          lastTransaction: higtLightData == null ? void 0 : (_higtLightData$entrie2 = higtLightData.entries) == null ? void 0 : _higtLightData$entrie2.lastTransaction\n        }), _jsx(HighlightCard, {\n          type: \"down\",\n          title: \"Sa\\xEDdas\",\n          amount: higtLightData == null ? void 0 : (_higtLightData$expens = higtLightData.expensives) == null ? void 0 : _higtLightData$expens.amount,\n          lastTransaction: higtLightData == null ? void 0 : (_higtLightData$expens2 = higtLightData.expensives) == null ? void 0 : _higtLightData$expens2.lastTransaction\n        }), _jsx(HighlightCard, {\n          type: \"total\",\n          title: \"Total\",\n          amount: higtLightData == null ? void 0 : (_higtLightData$total = higtLightData.total) == null ? void 0 : _higtLightData$total.amount,\n          lastTransaction: higtLightData == null ? void 0 : (_higtLightData$total2 = higtLightData.total) == null ? void 0 : _higtLightData$total2.lastTransaction\n        })]\n      }), _jsxs(Transactions, {\n        children: [_jsx(Title, {\n          children: \"Listagem\"\n        }), _jsx(TransactionList, {\n          data: transactions,\n          keyExtractor: function keyExtractor(item) {\n            return item.id;\n          },\n          renderItem: function renderItem(_ref) {\n            var item = _ref.item;\n            return _jsx(TransactionCard, {\n              data: item\n            });\n          }\n        })]\n      })]\n    })\n  });\n}","map":{"version":3,"sources":["C:/Users/Bruno/Documents/rocketseat/react-native/gofinances/src/screens/Dashboard/index.tsx"],"names":["React","useCallback","useEffect","useState","useFocusEffect","useTheme","AsyncStorage","HighlightCard","TransactionCard","Container","Header","UserWrapper","UserInfo","Photo","User","UserGreeting","UserName","Icon","HighlightCards","Transactions","Title","TransactionList","LoadContainer","Dashboard","dataKey","isLoading","setIsLoading","transactions","setTransactions","higtLightData","setHigtLightData","theme","removeAll","removeItem","getLastTransactionDate","collection","type","lastTransation","Date","Math","max","apply","filter","transaction","map","date","getTime","getDate","toLocaleString","month","loadTransactions","entriesTotal","expensiveTotal","response","getItem","JSON","parse","transactionsFormatted","item","Number","amount","style","currency","Intl","DateTimeFormat","day","year","format","id","name","category","lastTransactionEntries","lastTransactionExpensives","totalInterval","total","entries","lastTransaction","expensives","colors","primary","uri"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { ActivityIndicator } from 'react-native';\r\nimport { useFocusEffect, useTheme } from '@react-navigation/native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { HighlightCard } from '../../components/HighlightCard';\r\nimport { TransactionCard, TransactionCardProps } from '../../components/TransactionCard';\r\nimport theme from '../../global/styles/theme';\r\n\r\nimport {\r\n    Container, \r\n    Header,\r\n    UserWrapper,\r\n    UserInfo,\r\n    Photo,\r\n    User,\r\n    UserGreeting,\r\n    UserName,\r\n    Icon,\r\n    HighlightCards,\r\n    Transactions,\r\n    Title,\r\n    TransactionList,\r\n    LoadContainer\r\n } from './styles'\r\nimport { Alert } from 'react-native';\r\n\r\n export interface DataListProps extends TransactionCardProps {\r\n    id: string;\r\n }\r\n\r\n interface HighlightProps {\r\n    amount: string;\r\n    lastTransaction: string;\r\n }\r\n\r\n interface HightlightData {\r\n    entries: HighlightProps;\r\n    expensives: HighlightProps;\r\n    total: HighlightProps;\r\n }\r\n\r\nexport function Dashboard() {\r\n    const dataKey = '@gofinance:transactions';\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [transactions, setTransactions] = useState<DataListProps[]>([]);\r\n    const [higtLightData, setHigtLightData] = useState<HightlightData>({} as HightlightData);\r\n\r\n    const theme = useTheme();\r\n\r\n    async function removeAll() {\r\n        await AsyncStorage.removeItem(dataKey);\r\n    }\r\n\r\n    function getLastTransactionDate(collection: DataListProps[], type: 'positive' | 'negative') {\r\n        const lastTransation = new Date(Math.max.apply(Math, collection\r\n            .filter(transaction => transaction.type === type)\r\n            .map(transaction => new Date(transaction.date).getTime())));\r\n    \r\n        return `${lastTransation.getDate()} de ${lastTransation.toLocaleString('pt-BR', { month : 'long'})}`;\r\n    }\r\n\r\n    async function loadTransactions() {\r\n        const dataKey = '@gofinance:transactions';\r\n        let entriesTotal = 0;\r\n        let expensiveTotal = 0;\r\n        \r\n        const response = await AsyncStorage.getItem(dataKey);\r\n        const transactions = response ? JSON.parse(response) : [];\r\n        \r\n        const transactionsFormatted: DataListProps[] = transactions.map((item: DataListProps) => {\r\n            if (item.type === 'positive') {\r\n                entriesTotal += Number(item.amount);\r\n            } else if (item.type === 'negative') {\r\n                expensiveTotal += Number(item.amount);\r\n            }\r\n\r\n            const amount = Number(item.amount).toLocaleString('pt-BR', {\r\n                style: 'currency',\r\n                currency: 'BRL'\r\n            });\r\n            \r\n            const date = Intl.DateTimeFormat('pt-BR', {\r\n                day: '2-digit',\r\n                month: '2-digit',\r\n                year: '2-digit'\r\n            }).format(new Date(item.date));\r\n\r\n            return {\r\n                id: item.id,\r\n                name: item.name,\r\n                amount,\r\n                type: item.type,\r\n                category: item.category,\r\n                date, \r\n            }\r\n\r\n        });\r\n        setTransactions(transactionsFormatted);\r\n\r\n        const lastTransactionEntries = getLastTransactionDate(transactions, 'positive');\r\n        const lastTransactionExpensives = getLastTransactionDate(transactions, 'negative');\r\n        const totalInterval = `01 a ${lastTransactionExpensives}`;\r\n\r\n        const total = entriesTotal - expensiveTotal;\r\n\r\n        setHigtLightData({\r\n            entries: {\r\n                amount: entriesTotal.toLocaleString('pt-BR', {\r\n                    style: 'currency',\r\n                    currency: 'BRL'\r\n                }),\r\n                lastTransaction: `Última entrada dia ${lastTransactionEntries}`,\r\n            },\r\n            expensives: {\r\n                amount: expensiveTotal.toLocaleString('pt-BR', {\r\n                    style: 'currency',\r\n                    currency: 'BRL'\r\n                }),\r\n                lastTransaction: `Última saída dia ${lastTransactionExpensives}`,\r\n            },\r\n            total: {\r\n                amount: total.toLocaleString('pt-BR', {\r\n                    style: 'currency',\r\n                    currency: 'BRL'\r\n                }),\r\n                lastTransaction: totalInterval,\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadTransactions();\r\n        setIsLoading(false);\r\n    }, []);\r\n\r\n    useFocusEffect(useCallback(() => {\r\n        loadTransactions();\r\n    }, []));\r\n\r\n    return (\r\n        <Container>\r\n            {\r\n                isLoading ? <LoadContainer>\r\n                                <ActivityIndicator \r\n                                    color={theme.colors.primary}\r\n                                    size='large'\r\n                                 />\r\n                            </LoadContainer> :\r\n                <>\r\n                <Header>\r\n                    <UserWrapper>\r\n                        <UserInfo>\r\n                            <Photo source={{ uri: 'https://avatars.githubusercontent.com/u/13911181?v=4'}} />\r\n                            <User>\r\n                                <UserGreeting>Olá</UserGreeting>\r\n                                <UserName>Bruno</UserName>\r\n                            </User>\r\n                        </UserInfo>\r\n                    \r\n                        <Icon name='power' />\r\n                    \r\n                    </UserWrapper>\r\n                </Header>\r\n                <HighlightCards>\r\n                    <HighlightCard\r\n                        type='up'\r\n                        title='Entradas' \r\n                        amount={higtLightData?.entries?.amount}\r\n                        lastTransaction={higtLightData?.entries?.lastTransaction} />\r\n                    <HighlightCard\r\n                        type='down'\r\n                        title='Saídas' \r\n                        amount={higtLightData?.expensives?.amount}\r\n                        lastTransaction={higtLightData?.expensives?.lastTransaction} />\r\n                    <HighlightCard\r\n                        type='total'\r\n                        title='Total' \r\n                        amount={higtLightData?.total?.amount}\r\n                        lastTransaction={higtLightData?.total?.lastTransaction} />\r\n                </HighlightCards>\r\n\r\n                <Transactions>\r\n                    <Title>Listagem</Title>\r\n                    <TransactionList \r\n                        data={transactions}\r\n                        keyExtractor={item => item.id}\r\n                        renderItem={({ item }) => <TransactionCard data={item} />}\r\n                    />\r\n                </Transactions>\r\n            </>\r\n            }\r\n        </Container>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}