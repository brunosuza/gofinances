{"ast":null,"code":"import { Reanimated } from \"./reanimatedWrapper\";\nimport { State } from \"../../State\";\nimport { tagMessage } from \"../../utils\";\nvar warningMessage = tagMessage('react-native-reanimated is required in order to use synchronous state management');\nvar REANIMATED_AVAILABLE = (Reanimated === null || Reanimated === void 0 ? void 0 : Reanimated.useSharedValue) !== undefined;\nvar setGestureState = Reanimated === null || Reanimated === void 0 ? void 0 : Reanimated.setGestureState;\nexport var GestureStateManager = {\n  create: function create(handlerTag) {\n    'worklet';\n\n    return {\n      begin: function begin() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      activate: function activate() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      fail: function fail() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      end: function end() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"sources":["gestureStateManager.ts"],"names":["warningMessage","tagMessage","REANIMATED_AVAILABLE","setGestureState","Reanimated","GestureStateManager","create","begin","State","console","activate","fail","end"],"mappings":"AAAA,SAAA,UAAA;AACA,SAAA,KAAA;AACA,SAAA,UAAA;AASA,IAAMA,cAAc,GAAGC,UAAU,CAAjC,kFAAiC,CAAjC;AAMA,IAAMC,oBAAoB,GAAG,CAAA,UAAU,KAAV,IAAA,IAAA,UAAU,KAAA,KAAV,CAAA,GAAA,KAAA,CAAA,GAAA,UAAU,CAAV,cAAA,MAA7B,SAAA;AACA,IAAMC,eAAe,GAAGC,UAAH,KAAA,IAAGA,IAAAA,UAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,UAAU,CAAlC,eAAA;AAEA,OAAO,IAAMC,mBAAmB,GAAG;AACjCC,EAAAA,MADiC,kBAC3B,UAD2B,EACmB;AAClD;;AACA,WAAO;AACLC,MAAAA,KAAK,EAAE,iBAAM;AACX;;AACA,YAAA,oBAAA,EAA0B;AACxBJ,UAAAA,eAAe,CAAA,UAAA,EAAaK,KAAK,CAAjCL,KAAe,CAAfA;AADF,SAAA,MAEO;AACLM,UAAAA,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;AACD;AAPE,OAAA;AAULC,MAAAA,QAAQ,EAAE,oBAAM;AACd;;AACA,YAAA,oBAAA,EAA0B;AACxBP,UAAAA,eAAe,CAAA,UAAA,EAAaK,KAAK,CAAjCL,MAAe,CAAfA;AADF,SAAA,MAEO;AACLM,UAAAA,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;AACD;AAhBE,OAAA;AAmBLE,MAAAA,IAAI,EAAE,gBAAM;AACV;;AACA,YAAA,oBAAA,EAA0B;AACxBR,UAAAA,eAAe,CAAA,UAAA,EAAaK,KAAK,CAAjCL,MAAe,CAAfA;AADF,SAAA,MAEO;AACLM,UAAAA,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;AACD;AAzBE,OAAA;AA4BLG,MAAAA,GAAG,EAAE,eAAM;AACT;;AACA,YAAA,oBAAA,EAA0B;AACxBT,UAAAA,eAAe,CAAA,UAAA,EAAaK,KAAK,CAAjCL,GAAe,CAAfA;AADF,SAAA,MAEO;AACLM,UAAAA,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;AACD;AACF;AAnCI,KAAP;AAqCD;AAxCgC,CAA5B","sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\n// check if reanimated module is available, but look for useSharedValue as conditional\n// require of reanimated can sometimes return content of `utils.ts` file (?)\nconst REANIMATED_AVAILABLE = Reanimated?.useSharedValue !== undefined;\nconst setGestureState = Reanimated?.setGestureState;\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}