{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport * as Yup from 'yup';\nimport uuid from 'react-native-uuid';\nimport { useNavigation } from '@react-navigation/native';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useForm } from 'react-hook-form';\nimport { InputForm } from \"../../components/Forms/InputForm\";\nimport { Button } from \"../../components/Forms/Button\";\nimport { TransactionTypeButton } from \"../../components/Forms/TransactionTypeButton\";\nimport { CategorySelectButton } from \"../../components/Forms/CategorySelectButton\";\nimport { CategorySelect } from \"../CategorySelect\";\nimport { Container, Header, Title, Form, Fields, TransactionTypes } from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar schema = Yup.object().shape({\n  name: Yup.string().required('Nome é obrigatório'),\n  amount: Yup.number().typeError('Informe um valor númerico').positive('O valor não pode ser negativo')\n});\nexport function Register() {\n  var dataKey = '@gofinance:transactions';\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      transactionType = _useState2[0],\n      setTransactionType = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      categoryModalOpen = _useState4[0],\n      setCategoryModalOpen = _useState4[1];\n\n  var _useState5 = useState({\n    key: 'category',\n    name: 'Categoria'\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      category = _useState6[0],\n      setCategory = _useState6[1];\n\n  var navigation = useNavigation();\n\n  var _useForm = useForm({\n    resolver: yupResolver(schema)\n  }),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      reset = _useForm.reset,\n      errors = _useForm.formState.errors;\n\n  function handleTransactionsTypeSelect(type) {\n    setTransactionType(type);\n  }\n\n  function handleOpenSelectCategoryModal() {\n    setCategoryModalOpen(true);\n  }\n\n  function handleCloseSelectCategoryModal() {\n    setCategoryModalOpen(false);\n  }\n\n  function removeAll() {\n    return _removeAll.apply(this, arguments);\n  }\n\n  function _removeAll() {\n    _removeAll = _asyncToGenerator(function* () {\n      yield AsyncStorage.removeItem(dataKey);\n    });\n    return _removeAll.apply(this, arguments);\n  }\n\n  function handleRegister(_x) {\n    return _handleRegister.apply(this, arguments);\n  }\n\n  function _handleRegister() {\n    _handleRegister = _asyncToGenerator(function* (form) {\n      if (!transactionType) {\n        return Alert.alert('Selecione o tipo da transação');\n      }\n\n      if (category.key === 'category') {\n        return Alert.alert('Selecione uma categoria');\n      }\n\n      var newTransaction = {\n        id: String(uuid.v4()),\n        name: form.name,\n        amount: form.amount,\n        type: transactionType,\n        category: category.key,\n        date: new Date()\n      };\n\n      try {\n        var data = yield AsyncStorage.getItem(dataKey);\n        var currentData = data ? JSON.parse(data) : [];\n        var dataFormatted = [].concat(_toConsumableArray(currentData), [newTransaction]);\n        yield AsyncStorage.setItem(dataKey, JSON.stringify(dataFormatted));\n        reset();\n        setTransactionType('');\n        setCategory({\n          key: 'category',\n          name: 'Categoria'\n        });\n        navigation.navigate('Listagem');\n      } catch (error) {\n        console.log(error);\n        Alert.alert('Não foi possível salvar!');\n      }\n    });\n    return _handleRegister.apply(this, arguments);\n  }\n\n  return _jsx(TouchableWithoutFeedback, {\n    onPress: Keyboard.dismiss,\n    children: _jsxs(Container, {\n      children: [_jsx(Header, {\n        children: _jsx(Title, {\n          children: \"Cadastro\"\n        })\n      }), _jsxs(Form, {\n        children: [_jsxs(Fields, {\n          children: [_jsx(InputForm, {\n            name: \"name\",\n            control: control,\n            placeholder: \"Nome\",\n            autoCapitalize: \"sentences\",\n            autoCorrect: false,\n            error: errors.name && errors.name.message\n          }), _jsx(InputForm, {\n            name: \"amount\",\n            control: control,\n            placeholder: \"Pre\\xE7o\",\n            keyboardType: \"numeric\",\n            error: errors.amount && errors.amount.message\n          }), _jsxs(TransactionTypes, {\n            children: [_jsx(TransactionTypeButton, {\n              type: \"up\",\n              title: \"Income\",\n              onPress: function onPress() {\n                return handleTransactionsTypeSelect('positive');\n              },\n              isActive: transactionType === 'positive'\n            }), _jsx(TransactionTypeButton, {\n              type: \"down\",\n              title: \"Outcome\",\n              onPress: function onPress() {\n                return handleTransactionsTypeSelect('negative');\n              },\n              isActive: transactionType === 'negative'\n            })]\n          }), _jsx(CategorySelectButton, {\n            title: category.name,\n            onPress: handleOpenSelectCategoryModal\n          })]\n        }), _jsx(Button, {\n          title: \"Enviar\",\n          onPress: handleSubmit(handleRegister)\n        })]\n      }), _jsx(Modal, {\n        visible: categoryModalOpen,\n        statusBarTranslucent: true,\n        children: _jsx(CategorySelect, {\n          category: category,\n          setCategory: setCategory,\n          closeSelectCategory: handleCloseSelectCategoryModal\n        })\n      })]\n    })\n  });\n}","map":{"version":3,"sources":["C:/Users/Bruno/Documents/rocketseat/react-native/gofinances/src/screens/Register/index.tsx"],"names":["React","useState","Yup","uuid","useNavigation","yupResolver","AsyncStorage","useForm","InputForm","Button","TransactionTypeButton","CategorySelectButton","CategorySelect","Container","Header","Title","Form","Fields","TransactionTypes","schema","object","shape","name","string","required","amount","number","typeError","positive","Register","dataKey","transactionType","setTransactionType","categoryModalOpen","setCategoryModalOpen","key","category","setCategory","navigation","resolver","control","handleSubmit","reset","errors","formState","handleTransactionsTypeSelect","type","handleOpenSelectCategoryModal","handleCloseSelectCategoryModal","removeAll","removeItem","handleRegister","form","Alert","alert","newTransaction","id","String","v4","date","Date","data","getItem","currentData","JSON","parse","dataFormatted","setItem","stringify","navigate","error","console","log","Keyboard","dismiss","message"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { \r\n    Modal, \r\n    TouchableWithoutFeedback, \r\n    Keyboard,\r\n    Alert\r\n} from 'react-native';\r\n\r\nimport * as Yup from 'yup';\r\nimport uuid from 'react-native-uuid';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useForm } from 'react-hook-form';\r\nimport { InputForm } from '../../components/Forms/InputForm';\r\nimport { Button } from '../../components/Forms/Button';\r\nimport { TransactionTypeButton } from '../../components/Forms/TransactionTypeButton';\r\nimport { CategorySelectButton } from '../../components/Forms/CategorySelectButton';\r\n\r\nimport { CategorySelect } from '../CategorySelect';\r\n\r\nimport { \r\n    Container,\r\n    Header,\r\n    Title,\r\n    Form,\r\n    Fields,\r\n    TransactionTypes }\r\nfrom './styles';\r\n\r\ninterface FormData {\r\n    name: string;\r\n    amount: string;\r\n}\r\n\r\nconst schema = Yup.object().shape({\r\n    name: Yup.string().required('Nome é obrigatório'),\r\n    amount: Yup.number()\r\n    .typeError('Informe um valor númerico')\r\n    .positive('O valor não pode ser negativo')\r\n});\r\n\r\nexport function Register() {\r\n    const dataKey = '@gofinance:transactions';\r\n    const [transactionType, setTransactionType] = useState('');\r\n    const [categoryModalOpen, setCategoryModalOpen] = useState(false);\r\n\r\n    const [category, setCategory] = useState({\r\n        key: 'category',\r\n        name: 'Categoria'\r\n    });\r\n\r\n    const navigation = useNavigation();\r\n\r\n    const {\r\n        control,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { errors }\r\n    } = useForm({\r\n        resolver: yupResolver(schema)\r\n    });\r\n\r\n    function handleTransactionsTypeSelect(type: 'positive' | 'negative') {\r\n        setTransactionType(type);\r\n    }\r\n\r\n    function handleOpenSelectCategoryModal() {\r\n        setCategoryModalOpen(true);\r\n    }\r\n\r\n    function handleCloseSelectCategoryModal() {\r\n        setCategoryModalOpen(false);\r\n    }\r\n\r\n    async function removeAll() {\r\n        await AsyncStorage.removeItem(dataKey);\r\n    }\r\n\r\n    async function handleRegister(form: FormData) {\r\n      //  removeAll();\r\n        if (!transactionType) {\r\n            return Alert.alert('Selecione o tipo da transação');\r\n        }\r\n\r\n        if (category.key === 'category') {\r\n            return Alert.alert('Selecione uma categoria');\r\n        }\r\n\r\n        const newTransaction = {\r\n            id: String(uuid.v4()),\r\n            name: form.name,\r\n            amount: form.amount,\r\n            type: transactionType,\r\n            category: category.key,\r\n            date: new Date()\r\n        };\r\n\r\n        try {\r\n            const data  = await AsyncStorage.getItem(dataKey);\r\n            const currentData = data ? JSON.parse(data) : [];\r\n\r\n            \r\n            const dataFormatted = [\r\n                ...currentData,\r\n                newTransaction\r\n            ];\r\n\r\n            await AsyncStorage.setItem(dataKey, JSON.stringify(dataFormatted));\r\n\r\n            reset();\r\n            setTransactionType('');\r\n            setCategory({\r\n                key: 'category',\r\n                name: 'Categoria'\r\n            });\r\n\r\n            navigation.navigate('Listagem');\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            Alert.alert('Não foi possível salvar!');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <TouchableWithoutFeedback\r\n            onPress={Keyboard.dismiss}\r\n        >\r\n            <Container>\r\n                <Header>\r\n                    <Title>Cadastro</Title>\r\n                </Header>\r\n\r\n                <Form>\r\n                    <Fields>\r\n                        <InputForm \r\n                            name='name'\r\n                            control={control}\r\n                            placeholder='Nome'\r\n                            autoCapitalize='sentences'\r\n                            autoCorrect={false}\r\n                            error={errors.name && errors.name.message}\r\n                        />\r\n\r\n                        <InputForm\r\n                            name='amount'\r\n                            control={control}\r\n                            placeholder='Preço'\r\n                            keyboardType='numeric'\r\n                            error={errors.amount && errors.amount.message}\r\n                        />\r\n\r\n                        <TransactionTypes>\r\n                            <TransactionTypeButton \r\n                                type='up'\r\n                                title='Income'\r\n                                onPress={() => handleTransactionsTypeSelect('positive')}\r\n                                isActive={transactionType === 'positive'}\r\n                            />\r\n                            <TransactionTypeButton \r\n                                type='down'\r\n                                title='Outcome'\r\n                                onPress={() => handleTransactionsTypeSelect('negative')}\r\n                                isActive={transactionType === 'negative'}\r\n                            />\r\n                        </TransactionTypes>\r\n\r\n                        <CategorySelectButton\r\n                            title={category.name} \r\n                            onPress={handleOpenSelectCategoryModal}    \r\n                        />\r\n                    </Fields>\r\n                    \r\n                    <Button \r\n                        title='Enviar' \r\n                        onPress={handleSubmit(handleRegister)}\r\n                    />\r\n                </Form>\r\n\r\n                <Modal \r\n                    visible={categoryModalOpen}\r\n                    statusBarTranslucent={true}\r\n                >\r\n                    <CategorySelect \r\n                        category={category}\r\n                        setCategory={setCategory}\r\n                        closeSelectCategory={handleCloseSelectCategoryModal}\r\n                    />\r\n                </Modal>\r\n            </Container>\r\n        </TouchableWithoutFeedback>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}