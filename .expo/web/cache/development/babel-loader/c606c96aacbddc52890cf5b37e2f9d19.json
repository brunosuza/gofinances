{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { VictoryPie } from 'victory-native';\nimport { HistoryCard } from \"../../components/HistoryCard\";\nimport { useBottomTabBarHeight } from '@react-navigation/bottom-tabs';\nimport { Container, Header, Title, Content, ChartContainer, MonthSelect, MonthSelectButton, MonthSelectIcon, Month } from \"./styles\";\nimport { categories } from \"../../utils/categories\";\nimport { RFValue } from 'react-native-responsive-fontsize';\nimport theme from \"../../global/styles/theme\";\nimport { format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function Resume() {\n  var _useState = useState(new Date()),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedDate = _useState2[0],\n      setSelectedDate = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      totalByCategories = _useState4[0],\n      setTotalByCategories = _useState4[1];\n\n  function loadData() {\n    return _loadData.apply(this, arguments);\n  }\n\n  function _loadData() {\n    _loadData = _asyncToGenerator(function* () {\n      var dataKey = '@gofinance:transactions';\n      var response = yield AsyncStorage.getItem(dataKey);\n      var responseFormatted = response ? JSON.parse(response) : [];\n      var expensives = responseFormatted.filter(function (expensive) {\n        return expensive.type === 'negative' && new Date(expensive.date).getMonth() === selectedDate.getMonth() && new Date(expensive.date).getFullYear() === selectedDate.getFullYear();\n      });\n      var expensiveTotal = expensives.reduce(function (acumullator, expensive) {\n        return acumullator + Number(expensive.amount);\n      }, 0);\n      var totalByCategory = [];\n      categories.forEach(function (category) {\n        var categorySum = 0;\n        expensives.forEach(function (expensive) {\n          if (expensive.category === category.key) {\n            categorySum += Number(expensive.amount);\n          }\n        });\n\n        if (categorySum > 0) {\n          var totalFormatted = categorySum.toLocaleString('pt-BR', {\n            style: 'currency',\n            currency: 'BRL'\n          });\n          var percent = (categorySum / expensiveTotal * 100).toFixed(0) + \"%\";\n          totalByCategory.push({\n            key: category.key,\n            name: category.name,\n            color: category.color,\n            total: categorySum,\n            totalFormatted: totalFormatted,\n            percent: percent\n          });\n        }\n      });\n      setTotalByCategories(totalByCategory);\n    });\n    return _loadData.apply(this, arguments);\n  }\n\n  function handleDateChange(action) {\n    return Alert.alert('months');\n  }\n\n  useEffect(function () {\n    loadData();\n  }, [selectedDate]);\n  return _jsxs(Container, {\n    children: [_jsx(Header, {\n      children: _jsx(Title, {\n        children: \"Resumo por categoria\"\n      })\n    }), _jsxs(Content, {\n      showVerticalScrollIndicator: false,\n      contentContainerStyle: {\n        paddingHorizontal: 24,\n        paddingBottom: useBottomTabBarHeight()\n      },\n      children: [_jsxs(MonthSelect, {\n        children: [_jsx(MonthSelectButton, {\n          onPress: function onPress() {\n            return handleDateChange('prev');\n          },\n          children: _jsx(MonthSelectIcon, {\n            name: \"chevron-left\"\n          })\n        }), _jsx(Month, {\n          children: format(selectedDate, 'MMMM, yyy', {\n            locale: ptBR\n          })\n        }), _jsx(MonthSelectButton, {\n          onPress: function onPress() {\n            return handleDateChange('next');\n          },\n          children: _jsx(MonthSelectIcon, {\n            name: \"chevron-right\"\n          })\n        })]\n      }), _jsx(ChartContainer, {\n        children: _jsx(VictoryPie, {\n          data: totalByCategories,\n          colorScale: totalByCategories.map(function (category) {\n            return category.color;\n          }),\n          style: {\n            labels: {\n              fontSize: RFValue(18),\n              fontWeight: 'bold',\n              fill: theme.colors.shape\n            }\n          },\n          labelRadius: 50,\n          x: \"percent\",\n          y: \"total\"\n        })\n      }), totalByCategories.map(function (item) {\n        return _jsx(HistoryCard, {\n          title: item.name,\n          amount: item.totalFormatted,\n          color: item.color\n        }, item.key);\n      })]\n    })]\n  });\n}","map":{"version":3,"sources":["C:/Users/Bruno/Documents/rocketseat/react-native/gofinances/src/screens/Resume/index.tsx"],"names":["React","useEffect","useState","AsyncStorage","VictoryPie","HistoryCard","useBottomTabBarHeight","Container","Header","Title","Content","ChartContainer","MonthSelect","MonthSelectButton","MonthSelectIcon","Month","categories","RFValue","theme","format","ptBR","Resume","Date","selectedDate","setSelectedDate","totalByCategories","setTotalByCategories","loadData","dataKey","response","getItem","responseFormatted","JSON","parse","expensives","filter","expensive","type","date","getMonth","getFullYear","expensiveTotal","reduce","acumullator","Number","amount","totalByCategory","forEach","category","categorySum","key","totalFormatted","toLocaleString","style","currency","percent","toFixed","push","name","color","total","handleDateChange","action","Alert","alert","paddingHorizontal","paddingBottom","locale","map","labels","fontSize","fontWeight","fill","colors","shape","item"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { VictoryPie } from 'victory-native';\r\nimport { HistoryCard } from '../../components/HistoryCard';\r\nimport { useBottomTabBarHeight } from '@react-navigation/bottom-tabs';\r\n\r\nimport {\r\n    Container,\r\n    Header,\r\n    Title,\r\n    Content,\r\n    ChartContainer,\r\n    MonthSelect,\r\n    MonthSelectButton,\r\n    MonthSelectIcon,\r\n    Month\r\n} from './styles';\r\n\r\nimport { categories } from '../../utils/categories';\r\nimport { RFValue } from 'react-native-responsive-fontsize';\r\nimport theme from '../../global/styles/theme';\r\nimport { addMonths, subMonths, format } from 'date-fns';\r\nimport { ptBR } from 'date-fns/locale';\r\nimport { Alert } from 'react-native';\r\n\r\ninterface TransactionData {\r\n    type: 'positive' | 'negative';\r\n    name: string;\r\n    amount: string;\r\n    category: string;\r\n    date: string;\r\n}\r\n\r\ninterface CategoryData {\r\n    key: string;\r\n    name: string;\r\n    total: number;\r\n    totalFormatted: string;\r\n    color: string;\r\n    percent: string;\r\n}\r\n\r\nexport function Resume() {\r\n\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [totalByCategories, setTotalByCategories] = useState<CategoryData>([]);\r\n\r\n    async function loadData() {\r\n        const dataKey = '@gofinance:transactions';\r\n        const response = await AsyncStorage.getItem(dataKey);\r\n        const responseFormatted = response ? JSON.parse(response) : [];\r\n\r\n        const expensives = responseFormatted.filter(\r\n            (expensive: TransactionData) => \r\n                expensive.type === 'negative' && \r\n                new Date(expensive.date).getMonth() === selectedDate.getMonth() &&\r\n                new Date(expensive.date).getFullYear() === selectedDate.getFullYear()\r\n        );\r\n\r\n        const expensiveTotal = expensives\r\n        .reduce((acumullator: number, expensive: TransactionData) => {\r\n            return acumullator + Number(expensive.amount);\r\n        }, 0);\r\n\r\n        const totalByCategory: CategoryData[] = [];\r\n\r\n        categories.forEach(category => {\r\n            let categorySum = 0;\r\n            expensives.forEach((expensive: TransactionData) => {\r\n                if (expensive.category === category.key) {\r\n                    categorySum += Number(expensive.amount);\r\n                }\r\n            })\r\n\r\n            if (categorySum > 0) {\r\n                const totalFormatted = categorySum\r\n                    .toLocaleString('pt-BR', {\r\n                        style: 'currency',\r\n                        currency: 'BRL'\r\n                    });\r\n\r\n                const percent = `${(categorySum / expensiveTotal * 100).toFixed(0)}%`;\r\n\r\n                totalByCategory.push({\r\n                    key: category.key,\r\n                    name: category.name,\r\n                    color: category.color,\r\n                    total: categorySum,\r\n                    totalFormatted,\r\n                    percent\r\n                });\r\n            }\r\n        });\r\n        setTotalByCategories(totalByCategory);\r\n    }\r\n\r\n    function handleDateChange(action: 'next' | 'prev') {\r\n       return Alert.alert('months');\r\n       /* if (action === 'next') {\r\n            const months = addMonths(selectedDate, 1);\r\n            setSelectedDate(addMonths(selectedDate, 1));\r\n        } else {\r\n            setSelectedDate(subMonths(selectedDate, 1));\r\n        }*/\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, [selectedDate]);\r\n\r\n    return(\r\n        <Container>\r\n            <Header>\r\n                <Title>\r\n                    Resumo por categoria\r\n                </Title>\r\n            </Header>\r\n\r\n            <Content\r\n                showVerticalScrollIndicator={false}\r\n                contentContainerStyle={{\r\n                    paddingHorizontal: 24,\r\n                    paddingBottom: useBottomTabBarHeight()\r\n                }}\r\n            >\r\n                <MonthSelect>\r\n                    <MonthSelectButton onPress={() => handleDateChange('prev')}>\r\n                        <MonthSelectIcon name=\"chevron-left\" />\r\n                    </MonthSelectButton>\r\n\r\n                    <Month>\r\n                        {format(selectedDate, 'MMMM, yyy', { locale: ptBR })}\r\n                    </Month>\r\n\r\n                    <MonthSelectButton onPress={() => handleDateChange('next')}>\r\n                        <MonthSelectIcon name=\"chevron-right\" />\r\n                    </MonthSelectButton>\r\n                </MonthSelect>\r\n\r\n                <ChartContainer>\r\n                    <VictoryPie\r\n                        data={totalByCategories}\r\n                        colorScale={totalByCategories.map(category => category.color)}\r\n                        style={{\r\n                            labels: {\r\n                                fontSize: RFValue(18),\r\n                                fontWeight: 'bold',\r\n                                fill: theme.colors.shape\r\n                            }\r\n                        }}\r\n                        labelRadius={50}\r\n                        x='percent'\r\n                        y='total'\r\n                    />\r\n                </ChartContainer>\r\n            {\r\n                totalByCategories.map(item => (\r\n                    <HistoryCard\r\n                        key={item.key}\r\n                        title={item.name}\r\n                        amount={item.totalFormatted}\r\n                        color={item.color}\r\n                    />\r\n                ))\r\n            }\r\n            </Content>\r\n            \r\n        </Container>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}